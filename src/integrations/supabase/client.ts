
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qyoeeottdkmqduqcnuou.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF5b2Vlb3R0ZGttcWR1cWNudW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkzMjk3OTksImV4cCI6MjA2NDkwNTc5OX0.hGdDaCMy9qGbIWp20dWEMdpWpDzMMB3uduSkfyWgbgc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Detect if we're in a mobile browser
const isMobileBrowser = () => {
  if (typeof window === 'undefined') return false;
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
         (window.innerWidth < 768);
};

// Create a hybrid storage system that falls back to memory storage if localStorage fails
class HybridStorage {
  private memoryStorage: Record<string, string> = {};
  private useMemoryStorage = false;

  constructor() {
    // Test localStorage access
    try {
      localStorage.setItem('supabase_test', 'test');
      localStorage.removeItem('supabase_test');
    } catch (e) {
      console.warn('localStorage not available, using memory storage instead');
      this.useMemoryStorage = true;
    }
  }

  getItem(key: string): string | null {
    try {
      if (this.useMemoryStorage) {
        return this.memoryStorage[key] || null;
      }
      return localStorage.getItem(key);
    } catch (error) {
      console.warn('Error accessing storage:', error);
      // Fall back to memory storage on error
      this.useMemoryStorage = true;
      return this.memoryStorage[key] || null;
    }
  }

  setItem(key: string, value: string): void {
    try {
      if (this.useMemoryStorage) {
        this.memoryStorage[key] = value;
        return;
      }
      localStorage.setItem(key, value);
    } catch (error) {
      console.warn('Error writing to storage:', error);
      // Fall back to memory storage on error
      this.useMemoryStorage = true;
      this.memoryStorage[key] = value;
    }
  }

  removeItem(key: string): void {
    try {
      if (this.useMemoryStorage) {
        delete this.memoryStorage[key];
        return;
      }
      localStorage.removeItem(key);
    } catch (error) {
      console.warn('Error removing from storage:', error);
      // Fall back to memory storage on error
      this.useMemoryStorage = true;
      delete this.memoryStorage[key];
    }
  }
}

// Create the Supabase client with optimized settings
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: new HybridStorage(),
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'X-Client-Info': `req-it-now-website/${isMobileBrowser() ? 'mobile' : 'desktop'}`
    },
  },
  realtime: {
    timeout: 30000 // Increase timeout for slower connections
  }
});
